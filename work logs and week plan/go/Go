go get github.com/gin-gonic/gin
go get github.com/go-xorm/xorm
go get github.com/go-xorm/cmd/xorm //反向生成工具

go get github.com/go-sql-driver/mysql  //Mysql驱动

go 的约定事项：
    源代码放在%GOPATH%/src/下面，比如 %GOPATH%/src/tanK
    这是一种约定。
在goland 中新启一个项目 
    Project 
        bin
        pkg
        src
            demo//应用名
                main.go
在settings的Go 里配置GOPATH 和projectGOPATH
在configuration 里配置 :run kind :directory
    Directory ： \src\Project
    Outputdirectory : \bin    //生成可执行文件               
    Working directory ：\src\Project


go build demo.go  会得到一个同名的可执行文件
如果在目录下面直接执行go build 不带文件名，将会得到一个和目录同名的可执行文件 //如果有多个呢？


step1: 建立工程文件夹 goproject
step2: 在工程文件夹中建立src,pkg,bin文件夹
step3: 在GOPATH中添加project路径    例 e:/goproject
step4: 如工程中有自己的包examplepackage，那在src文件夹下建立以包名命名的文件夹 例 examplepackage
step5；在src文件架下编写主程序代码代码 goproject.go
step6；在examplepackage文件夹中编写 examplepackage.go 和 包测试文件 examplepackage_test.go
step7; 编译调试包
           go build examplepackage
           go test examplepackage
           go install examplepackage
          这时在pkg文件夹中可以发现会有一个相应的操作系统文件夹如windows_386z, 在这个文件夹中会有examplepackage文件夹，在该文件中有examplepackage.a文件
step8；编译主程序
           go build goproject
           成功后会生成goproject.exe文件
至此一个GO工程编辑成功


语言特性：
    自动垃圾回收
    函数多返回值
    并发编程
    面向消息编程，通过使用消息而不是共享内存来进行并发编程

源文件第一行必须指明这个文件属于哪个包，如package main
注意，大写开头的标识符可以被外部包使用（相当于公有变量）小写开头的对包外不可见（相当于私有）
但是在包内部使用没有什么区别
注意，花括号不能单独放一行。
Go中一行表示一个语句的结束，强行想写在一行可以用分号分隔。

数据类型：
    数字、布尔、字符串、派生类型（指针、数组、map、结构化、接口、函数）
    数字:
        整型：(u)int (8,16,32,64)  255 65535 42亿 2^63-1
        浮点数：float32 float64
        其他数字类型：byte(类似uint8)、rune(类似int32)、uint(32或64)、int(uint)、uintptr(无符号整型，用于存放指针)
    字符串类型在go里是一个结构，包含底层数组的指针和长度。所以unsafe.Sizeof会有两部分字节8+8=16

如果数字定义后没有赋值就为0（而不是nil），如果布尔类型定义后没有赋值就是false，其他派生类型定义不赋值就是nil

可以由程序自行判断变量类型：var v_bool = true 

intVal := 1(:=是个声明语句，如果前面声明过了会报编译错误。并且会自动根据右边值来推导类型) 
var f string = "hello " 相当于 f:="hello"
可以声明多个变量：
    var v1,v2 int
    v1,v2 = 1,2

    var v1, v2, v3 = true,1,'string1' //类型自动判断
    注意，go中的单引号和双引号意义不同，单引号表示特殊类型rune。双引号才是字符串，可以转义，不能多行
    反引号可以多行，表示原生字符串，不支持转义。
    v1, v2 := 1, 2 //这种格式只能在函数体内出现 


var （ 
    v1 int
    v2 string
）

常量：
    const num int = 4;
    注意const 不能使用:= 来赋值
    常量可以是字符，字符串，布尔值，或数值。无需指定类型，自动判断
    const (
        a = "abc"
        b = len(a)
        c = unsafe.Sizeof(a)
    )

    const后面可以带len、cap、unsafe.Sizeof等函数，但是只能是内置的函数
    iota是特殊常量，在const中重置为零，并随着行数增加而自增，可理解为const语句中的行索引
    在定义常数组的时候，如果不提供初始值，就会沿用上一行的表达式

运算符：
    逻辑运算符： &&  ||  ！

位运算符
    & | ^

go没有三目运算符

if bool {
    //code
} else {
    // something
}
if 的条件表达式前面可以执行一个简单的语句，变量作用域仅在if内，用分号;与条件表达式分隔
if v:=x*2;v>=100{return v}else{return v} //  在else语句块里也可以使用v 变量

var grade string = "A"
var marks int = 90
switch marks {
    case 100: grade = "A"
    case 60,50,40:grade ="C"
    default :grade = "D"
}
switch{
    case grade=="A":
        fmt.Printf('good')
    case grade=="C":
        fmt.Printf('not good')
    default:
        fmt.Printf('ok')
}

如果一条case 里带有fallthrough关键字，那么不管下一条case是否为true都会被执行
switch同样可以带一句简单的语句：
    switch tar:=1;{
        case...
    }


for(init;condition;post){
    //code
}
先执行init，判断是否符合condition，执行code，然后执行post，继续判断condition

for condition {}
for {}
for的range格式可以对 slice、map、数组、字符串等进行循环迭代
    for key,value := range oldMap{
        newMap[key] = value
    }
如果不想要index，可以用下划线_来占位，这样即使不使用该变量也不会报错。


goto 可以跳转到指定代码块，但不建议使用

函数定义：
    func swap(x,y string)(string, string){
        return y,x
    }
    可以对返回值进行命名，return 就不需要带具体的变量名了:
    func test(a int)(name string, age int){
        name="adam"
        age = a
        return 
    }

    函数引用传递：将实际变量的地址传入函数，函数中对参数的修改将影响实际变量
    func swap(x *int, y *int){
        var temp int
        temp = *x
        *x = *y
        *y = temp
    }
    调用：  swap(&a,&b)


    func main(){
        getx :=func(x float64) float64{//getx函数变量
            return math.Sqrt(x)
        }
    }
    fmt.Printf(getx(9))

    type cb func(int) int 可以声明一个函数类型

    函数作为参数传入：
        func test(x int,fn func(int) int) int {return fn(x)}
    闭包：
        func add(x1,x2 int) func(x3 int,x4 int)(int,int,int){
            i:=0
            return func(x3 int,x4 int)(int,int,int){
                i++
                return i,x1+x2,x3+x4
            }
        }
    闭包写法：
        func close() func(int) int{
            sum:=0
            return func(x int) int{
                sum +=x
                return sum
            }
        }
    这个函数返回一个闭包，闭包是一个函数值，每个闭包都被绑定在其各自的sum变量上。
    闭包的作用：加强模块化、抽象、简化代码


方法就是包含了接受者的函数：
    定义结构体：
    type Circle struct{
        radius float64
    }

    func main(){
        var c1 Circle
        c1.radius=100
        fmt.Printf(c1.getArea())
    }

    func (c Circle) getArea() float{
        return 3.14*c.radius*c.radius
    }
    如果想要方法修改结构体本身，那么需要传入指针接收者：
        func (c *Circle) getArea() float{...}
    如果不传入指针接收者，操作的是其实是副本，而非本身，因此修改操作并不会改变本身。
    传入指针接收者后就能修改本身了。
    如果是大型结构体，为了避免多次复制副本，使用指针接收者可以提升效率

    带指针参数的函数必须接受一个指针，而带指针接收者的方法被调用的时候，接收者可以为值也可以为指针
    因为如果方法带指针接收者的话，Go会吧语句c.getArea() 解释为(&c).getArea()



数组定义方式：
    数组的长度是这个类型的一部分，因此数组不能改变大小。改变大小的叫切片
    var my_array [100] float32  定义一个列表长度为100，类型为float32 的数组
    初始化
    var my_array = [5]int{1,2,3,4,5}

    var balance = [...]int{1,2,3,4} // 忽略中括号的数字，go会自动设置大小
    多维数组定义：
        var multi_array = [2][2] int{
            {1,2},
            {3,4}, //注意这里必须加上逗号，因为最后一行}不能单独成行，
        }
    数组元素访问：  
        val := multi_array[0][0]
        或者
        var value int = multi_array[0][0]

    数组作为函数参数
        void myFunction (arr [10]int) //指定了长度

        void myFunction2(arr []int) //存疑，Go的数组作为函数参数传入必须 指定长度？？？

切片：
    prime := [5]int{1,2,3,4,5}
    var slice1 []int = prime[1:4] // {2,3,4} 注意前包后不包
    切片不存储数据，是数组的引用，如果修改切片也会修改本来的数组，并且其他引用自这个数组的切片值也会相应变化。
    切片文法：
        []bool{true,true,false} //这条语句先创建了一个数组，然后构建了一个引用这个数组的切片
    切片有长度和容量，长度表示切片内的元素，容量表示切片内第一个到数组内最后一个元素的个数。
    长度和容量分别用 len 和cap 来获取。
    切片不能越界，切片可以拓展、削减，前提是对切片操作而不是对数组操作。
    nil 切片的长度和容量都为0
    make 函数可以创建一个元素为零的数组并返回它的切片
    a :=make([]int,0,5) //表示创建长度为0，容量为5 的数组并返回它的切片
    使用append(slice,v1,v2,v3) 可以往切片里添加1到n个元素
    for i,x:=range slice{} 可以遍历切片

defer 可以将函数压栈，直到外层函数返回之后才调用。
defer 在函数返回、函数结束、程序panic 的时候执行
defer 、 panic 、 recover 回头再看


&操作表示取内存地址，*p表示把p指针指向地址的值取出来。
struct中使用指针的意义：不使用指针的时候，值的传递都是通过副本进行，随意修改不会影响本身。使用指针可以修改本身。

结构体：
    结构体就是一组字段
    type Students struct { 
        name string
        age int
    }
    stu = Students{"adam",19} // stu打印出来为 {"adam" 19} 可以通过{"adam" 19}.name取到adam
    stu2 = Students{name:"eve"} // 创建一个name为eve的struct，age属性被隐式赋予为0。
    stu3 = Students{age:19}//创建一个age 为19的struct ,name 属性被隐式赋予为""

    结构体的继承和聚合：
    type A struct{
        name string
        age int
    }

    type B struct {
        A // 继承A结构体的name和age
        sex string
    }

    type C struct {
        a A // 聚合关系
    }

    p =&A{"adam"} // 指向结构体的指针无需提前声明，要在结构体实例前面加&
映射：
    映射的创建和结构体类似，但必须指定键值对
    var m = make(map[string]Students) // 或者 var m = map[string]Studnets{}
    m["adam"] = Students{"adam",19}
    m["eve"] = Students{"eve",12}
    创建、赋值、获取的方式和python字典差不多
    删除使用delete(m,key)
    可以用双赋值检测某个键是否存在：
        elem,ok:=m[key]  //如果不存在，ok为false，elem为该类型的零值

错误：




接口类型：
    接口类型是一组有共性的方法定义的集合，想要使用接口 结构体必须完整实现接口里的函数。
    type People interface{
        getName() string
    }

    type Women struct{
        name string
    }
    type Men struct{
        name string
    }

    func (women Women) getName() string{
        return "women !!"
    }

    func (man Man) getName() string{
        return "Man !!"
    }

    func main(){
        var p People = Men{"adam"}//第一种方式，隐式实现，需要Men已经实现了接口，如果没实现会报错。
        p.getName()
        fmt.Printf(Women{"eve"}.getName()}//第二种方式
    }

    接口也有值，接口值可以看做包含值和类型的元组。
    类型断言：用来判断接口值和类型
        var i interface{} = "hello" // 这里接口值为 ("hello",string)
        v,ok := i.(string) // v 为value，ok为bool，i是接口的实例，string是判断是否为字符串的参数。

    类型选择：
        func do(i interface{}){
            switch v:= i.(type){
                case int:
                    fmt.Printf("int type")
                case string:
                    fmt.Printf("string type")
            }
        }
    结构体绑定接口的时候可以用指针接收者
    接口值零值为nil
    错误：
        type error interface {
            Error() string
        }
        以上是go内置的错误接口，可以通过实现error接口类型来生成错误信息
        func test(f float)(float,error){
            if f<0{
                return 0,errors.New{"smaller than zero"}//这里error.New可以返回错误信息
            }
        }
        result, err := test(-1.2)
        if err != nil{
            fmt.Printf(err)
        }

并发：
    使用go 关键字来开启goroutine，一个程序中所有的goroutine共享一个地址空间。
    goroutine是轻量级的线程
    通道channel用于传递数据，两个goroutine之间可以传递一个值来进行同步和通信
    如果不指定方向则为双向通道。
    ch <- v // v发送到通道ch
    v := <- ch // 通道ch 赋值给v
    默认情况下，发送和接受操作在另一端准备好之前都会阻塞，这使得Go在没有显式锁的情况下进行同步。
    
    通道的声明：
        ch := make(chan int,100) // 100为缓冲区大小，可以不指定
        缓冲区满了后会阻塞，报死锁错误
        通道要及时把内容赋值出去。
    通道可以通过close 来关闭，只有发送者能关闭信道，接收者不能。
    向关闭的信道发送数据会引发panic
    v ，ok =<- ch 用于查看ch 是否关闭
    如果关闭了，ok 为false

    cap(ch) 查看ch 的缓存区大小， len(ch)
    for i:=range c{} //该语句会不断从信道接受值，直到被关闭
    一般来讲通道无需关闭，只有在需要告诉接收者没数据了才有必要关闭。
    如果使用range遍历，但通道却不关闭，那么range会一直阻塞。

    select 语句可以阻塞到某个分支可以继续执行为止，如果多个分支准备好时候会随机选择一个来执行。
    如果selct中其他分支都没有准备好，default就会执行。
        func main(){
            tick := time.Tick(100 * time.Millisecond)
            boom := time.After(500 * time.Millisecond)

            for {
                select {
                    case <-tick:
                        fmt.Println("tick")
                    case <-boom：
                        fmt.Println("Boom")
                    default:
                        fmt.Println("...")
                        time.Sleep(50 * time.Milliseconsd)
                }
            }
        }

可以用sync.Mutex 来加锁解锁
defer语句可以保证一定解锁

通道关闭后可读不可写
平时定义的都是双向通道。


go 通道的一些问题：
    func main() { //为什么加了缓存值不报错，但是去掉缓存值就报错？ deadlock
	ch := make(chan int,2)
	ch <- 1
	ch <- 2
	fmt.Println(<-ch)
	fmt.Println(<-ch)

}
go 的切片之所以能动态拓展容量，本质上是当引用的数组达到上限之后，append 内部会创建一个新的数组。并将原有数组的元素被拷贝给这个新的数组
最后返回建立在这个新数组上的切片。这个新切片的容量是旧切片的二倍

interface类型强制转换
    A = c.Get(sysUSER)
    A.(*model.sysUser) //进行强制类型转化

单元测试：
    golang的测试文件要以_test结尾，并且函数要以Test开头，TestXxx函数参数为*testing.T
    使用go test 会自动执行_test结尾的文件里的以Test开头的函数
    使用testing 包的T结构的log()方法打印字符串
    测试文件不会参与编译
    
    执行go test -v 显示 未通过的测试用例的信息

    可以直接在goland 里执行单个测试的函数

func TestMytest(t *testing.T){
    role := new(model.Role)
    role.Id = 1
    role.Name ="adam"
    if res,err := service.ViewFunc(role);err!=nil{
        t.Error("出错了")
    }else{
        t.Log("通过了")
    }
}



GO的继承：
    type Father struct{
        Name string
        age int
    }

    type Son struct{
        Father
    }

    创建的字典默认是nil， 需要用make(map[string]string)来初始化
    