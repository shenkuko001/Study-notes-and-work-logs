构建Go程序，编译和链接两步是必须的，由go构建工具处理。
构建本地程序和本地包需要三个条件：
    1、go 的bin 目录 $GOROOT/bin必须在环境变量里
    2、包含src目录的目录树，其中包含了源代码
    3、src的上级目录必须在环境变量GOPATH中
Linux:
    export GOPATH=$HOME/goeg
    cd $GOPATH/src/hello
    go build
    然后就能直接执行了： ./hello

go install 和go build 效果一样，不同在于go install把可执行文件放在%GOPATH/bin中，install之后可以在任何目录运行

go的字符其实是一个整型数
空接口用interface{}表示，可以用来表示任何值（效果上相当于指向任意类型的指针）
函数和方法的参数类型可以是任何内置类型或者自定义类型，甚至是接口。
如果传入参数是接口，表示一个函数可以接受一个值，不管实际的类型是什么。
go函数和方法都可以返回多个值，一般返回后一个值是错误值，类型为error

切片、映射、通道、字符串都可以用内置的len函数获得长度，cap获取容量
go里的通道、映射、切片等数据结构都需要通过make()函数创建
go中的构造函数不会被显式调用，而是每个值创建时候都会初始化成相应的空值。

go中的文件类型表示为一个指向os.File的指针
    任何程序执行的时候会自动打开三个标准文件：stdin stdout stderr
    读写创建两个变量，并初始化为stdin和stdout，类型都为*os.File
    一般和文件读写、打开相关的函数，都是返回*os.File 和一个err类型。
    os.File类型可以用于任何要求io.Reader 或者io.Writer接口的地方。
    这是鸭子类型：任何类型只要实现了接口定义的方法，他的值都可以用于这个接口。
可以使用panic()来触发一个异常，使用recover()来恢复。

