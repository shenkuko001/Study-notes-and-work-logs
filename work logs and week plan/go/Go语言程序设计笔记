构建Go程序，编译和链接两步是必须的，由go构建工具处理。
构建本地程序和本地包需要三个条件：
    1、go 的bin 目录 $GOROOT/bin必须在环境变量里
    2、包含src目录的目录树，其中包含了源代码
    3、src的上级目录必须在环境变量GOPATH中
Linux:
    export GOPATH=$HOME/goeg
    cd $GOPATH/src/hello
    go build
    然后就能直接执行了： ./hello

go install 和go build 效果一样，不同在于go install把可执行文件放在%GOPATH/bin中，install之后可以在任何目录运行

go的字符其实是一个整型数
空接口用interface{}表示，可以用来表示任何值（效果上相当于指向任意类型的指针）
函数和方法的参数类型可以是任何内置类型或者自定义类型，甚至是接口。
如果传入参数是接口，表示一个函数可以接受一个值，不管实际的类型是什么。
go函数和方法都可以返回多个值，一般返回后一个值是错误值，类型为error

切片、映射、通道、字符串都可以用内置的len函数获得长度，cap获取容量
go里的通道、映射、切片等数据结构都需要通过make()函数创建
go中的构造函数不会被显式调用，而是每个值创建时候都会初始化成相应的空值。

go中的文件类型表示为一个指向os.File的指针
    任何程序执行的时候会自动打开三个标准文件：stdin stdout stderr
    读写创建两个变量，并初始化为stdin和stdout，类型都为*os.File
    一般和文件读写、打开相关的函数，都是返回*os.File 和一个err类型。
    os.File类型可以用于任何要求io.Reader 或者io.Writer接口的地方。
    这是鸭子类型：任何类型只要实现了接口定义的方法，他的值都可以用于这个接口。
可以使用panic()来触发一个异常，使用recover()来恢复。

======================数值==========================
rune 相当于 uint32  
byte 相当于 uint8 
在高精度计算情景中，可以用大规格的整数 int64来表示百万分之一元，从而使得数十亿元之内的计算还能保持足够的精度。
浮点数表示的是近似值，因此高精度计算不能用浮点数
go 标准库提供了连个无限精度的整数类型，用于整数的big.Int 和用于 有理数的big.Rat

go的字符串类型是变宽字符序列
随时可以吧字符转化成切片 ([]rune)这个切片可以索引
在go里用+=拼接字符串是低效的，最好使用字符串切片([]string)然后使用strings.Join()
直接用for range遍历字符串会得到rune类型的数值，utf-8 编码，一个字符占3字节
var buffer bytes.Buffer
for {
    if piece, ok := getNextValidString();ok{
        buffer.WriteString(piece)
    }else{
        break
    }
}
fmt.Print(buffer.String(),"\n")


fmt 的Sprintf   看一下怎么用
fmt Printf

值在传递给函数或者方法的时候都会被复制一次。
数组是按值传递的，因此传递大数组代价很大，但一般都是用切片（一个引用）来替代。


并发编程要注意 保证所有工作goorutine结束后才让主 goroutine 退出。
go使用通道来避免使用锁
使用单向通道会提供额外的编译期检查

go语言不保证通道里指针或者引用类型的安全性（比如指针和映射），因此涉及到指针和引用的时候，必须保证这些值只能被一个goroutine访问

